<?php
use App\Models\SurveyData;

?>
<!DOCTYPE html>
<html>

<head>
    <title>Data Reports</title>
    <!-- Include Chart.js library -->
    <script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <!-- Include Axios library -->
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap/dist/css/bootstrap.min.css" />
    
    <style>
    .loader-container {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        z-index: 1000;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .loader {
        border: 4px solid #f3f3f3;
        border-top: 4px solid #3498db;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        animation: spin 2s linear infinite;
    }

    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>

</head>

<body>
    <div id="app" class="container mt-5">
        <div v-if="lga">

        </div>
        <div v-else  class="row">
            <!-- Add a <select> element for zone filtering -->
            <div class="col-md-12 mb-3">
                <label for="zoneFilter">Select Zone:</label>
                <select id="zoneFilter" class="form-select" v-model="selectedZone"
                    @change="updateDataAndGenerateCharts">
                    <option v-for="zone in Object.keys(zones)" :value="zone">@{{zone.replaceAll('_'," ")}}</option>                    
                </select>
            </div>
            <div class="col-md-12">
                <label for="createdAtFilter">Created At:</label>                
                <input type="date" class="form-control" @change="updateDataAndGenerateCharts" id="createdAtFilter" v-model="createdAt" @change="updateDataAndGenerateCharts" />
            </div>
            <div v-if="loading" id="loader-container">
                <div class="loader"></div>
            </div>
            <div v-show="!loading" class="col-md-12 row" :key="chartkey">
                <h5>Total entries: @{{total_entries}}</h5>
                <div class="col-md-12 mb-3 shadow-sm" style="height:55vh">
                    <div class="chart-container w-100 position-relative" style="height: 50vh; ">
                        <!-- <h3 class="text-center">Collector ID Entry</h3> -->
                        <canvas id="lgaID" ></canvas>
                    </div>
                </div>
                <div class="col-md-12 mb-3 shadow-sm" style="height:55vh">
                    
                    <div class="chart-container w-100 position-relative" style="height: 50vh; ">
                        <!-- <h3 class="text-center">Collector ID Entry</h3> -->
                        <canvas id="collectorIdChart" ></canvas>
                    </div>
                </div>
                <div class="col-md-12 row mt-5 mb-3">
                    <div class="col-md-3">
                        <div class="chart-container" style="position: relative">
                            <h6 class="text-center">Age Distribution</h6>
                            <canvas id="ageDistributionChart"></canvas>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="chart-container">
                            <h6 class="text-center">Marital Status</h6>
                            <center>
                            <canvas id="maritalStatusChart"></canvas>
                            </center>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="chart-container">
                            <h6 class="text-center">Gender Distribution</h6>
                            <canvas id="genderDistributionChart"></canvas>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="chart-container">
                            <h6 class="text-center">Do you have any disability</h6> 
                            <canvas id="Doyouhaveanydisability"></canvas>
                        </div>
                    </div>
                </div>
                <div class="col-md-12 mb-3 mt-5 shadow-sm" style="height:55vh">
                    <div class="chart-container w-100 position-relative" style="height: 50vh; ">
                        <!-- <h3 class="text-center">Source of Income</h3> -->
                        <canvas id="sourceOfIncomeChart"></canvas>
                    </div>
                </div>

                <div class="col-md-12 mb-3 mt-5 shadow-sm" style="height:55vh">
                    <div class="chart-container w-100 position-relative" style="height: 50vh; ">
                        <!-- <h3 class="text-center">Source of Income</h3> -->
                        <canvas id="wardID"></canvas>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
      const { createApp } = Vue

        createApp({            
            data() {
                const currentDate = new Date().toISOString();
                return {
                    loading: false,
                    chartkey: 0,
                    createdAt: currentDate,                    
                    total_entries:0,
                    lgas:{
                        "AGAIE": ["001","002","003","004","005","006","007","008","009","010","011"],
                        "AGWARA": ["012","013","014","015","016","017","018","019","020","021"],
                        "BIDA": ["022A","022B","023","024","025A","025B","026","027","028","029","030","031","032A","032B","033","034","035A","035B"],
                        "BORGU": ["036","037","038","039","040","041","042","043","044","045"],
                        "BOSSO": ["046A","046B","047A","047B","048","049A","049B","050","051","052A","052B","053","054A","054B","055"],
                        "CHANCHAGA": ["056A","056B","057","058","059","060","061A","061B","062","063","064A","064B","065","066A","066B"],
                        "EDATI": ["067A","067B","068","069","070","071","072","073","074","075A","075B","076"],
                        "GBAKO": ["077","078","079","080","081","082","083","084","085A","085B","086"],
                        "GURARA": ["087","088A","088B","089","090","091","092","093A","093B","094","095","096"],
                        "KATCHA": ["097A","097B","098","099","100","101","102","103A","103B","104","105","106A","106B"],
                        "KONTAGORA": ["107A","107B","108A","108B","109","110","111","112A","112B","113","114","115","116","117","118","119A","119B"],
                        "LAPAI": ["120","121","122A","122B","123","124","125","126","127","128A","128B","129"],
                        "LAVUN": ["130A","130B","131","132","133","134A","134B","135","136","137","138","139","140A","140B","141"],
                        "MAGAMA": ["142","143A","143B","144","145","146","147","148A","148B","149","150","151","152"],
                        "MARIGA": ["153","154","155","156","157","158","159","160","161","162","163"],
                        "MASHEGU": ["164","165","166","167","168","169","170","171","172","173"],
                        "MOKWA": ["174A","174B","174C","175","176A","176B","177","178","179","180","181","182","183","184"],
                        "MUNYA": ["185","186A","186B","187A","187B","188","189","190","191","192","193","194","195"],
                        "PAIKORO": ["196","197","198A","198B","199","200","201","202A","202B","203","204","205","206"],
                        "RAFI": ["207","208","209A","209B","210A","210B","211","212","213","214A","214B","215","216","217"],
                        "RIJAU": ["218","219","220","221","222","223","224","225A","225B","226","227","228"],
                        "SHIRORO": ["229","230","231","232","233A","233B","234","235","236","237","238","239","240","241","242","243"],
                        "SULEJA": ["244A","244B","245","246","247","248A","248B","249","250","251A","251B","252","253A","253B"],
                        "TAFA": ["254","255","256","257","258","259","260A","260B","261","262","263"],
                        "WUSHISHI": ["264","265","266","267A","267B","268","269","270","271","272","273","274A","274B"]
                        },
                    selectedLGA:null,
                    itemsPerPage: 1000,
                    currentPage: 1,
                    data: [],
                    selectedZone: "ZONE_A", // Default selected zone
                    zones:{
                        ZONE_A:[],
                        ZONE_B:[],
                        ZONE_C:[],                        
                    },
                    reverseLookup: {},
                }
            },
            computed: {
                zoneUrl() {
                    return this.zones[this.selectedZone];
                },
            },
            methods: {
                // Function to fetch data for a specific page
                async fetchData(url) {
                    try {
                        //const createdAtParam = this.createdAt ? `&created_at=${this.createdAt}` : '';
                        const response = await axios.get(url);                                         
                        return response.data;
                    } catch (error) {
                        console.error("Error fetching data:", error);
                        return [];
                    }
                },
                determineLGA(collectorId){
                    return this.reverseLookup[collectorId] || null;
                },
                removeAlphabets(inputString) {
                    // Use a regular expression to remove alphabets (letters)
                    const stringWithoutAlphabets = inputString.replace(/[A-Za-z]/g, '');
                    return stringWithoutAlphabets;
                },
                async generateCharts(data) {
                    // Initialize chart data structures for each chart
                    const collectorIdData = {};
                    const ageDistributionData = {};
                    const maritalStatusData = {};
                    const genderDistributionData = {};
                    const sourceOfIncomeData = {};
                    const Doyouhaveanydisability = {};
                    const LgaData = {};
                    const wards = {};

                    data.forEach((entry) => {
                        // Process data for each chart
                        const collectorId = entry["1_Data_Collectors_ID"];
                        const collectorId2 = collectorId.toUpperCase();
                        const cleanedCollectorId = this.removeAlphabets(collectorId2);

                        if (cleanedCollectorId.length === 1) {
                            LgaData[this.determineLGA('00'+collectorId2)] = (LgaData[this.determineLGA('00' + collectorId2)] || 0) + 1;                            
                        } else if (cleanedCollectorId.length === 2) {
                            LgaData[this.determineLGA('0' + collectorId2)] = (LgaData[this.determineLGA('0' + collectorId2)] || 0) + 1;                            
                        } else {                       
                            LgaData[this.determineLGA(collectorId2)] = (LgaData[this.determineLGA(collectorId2)] || 0) + 1;
                        }

                        collectorIdData[collectorId] = (collectorIdData[collectorId] || 0) + 1;                        

                        const wardid = entry["2_Ward"];
                        wards[wardid] = (wards[wardid] || 0) + 1;

                        const ageRange = entry["9_Age_Range"];
                        ageDistributionData[ageRange] = (ageDistributionData[ageRange] || 0) + 1;

                        const maritalStatus = entry["10_Marital_Status"];
                        maritalStatusData[maritalStatus] = (maritalStatusData[maritalStatus] || 0) + 1;

                        const gender = entry["11_Gender"];
                        genderDistributionData[gender] = (genderDistributionData[gender] || 0) + 1;

                        const sourceOfIncome = entry["16_Source_of_income"];
                        sourceOfIncomeData[sourceOfIncome] = (sourceOfIncomeData[sourceOfIncome] || 0) + 1;

                        const disabilities= entry["12_Do_you_have_any_d"];
                        Doyouhaveanydisability[disabilities] = (Doyouhaveanydisability[disabilities] || 0) + 1;
                    });
                    

                    // Generate and update the respective charts for each data structure
                    this.generateBarChart("collectorIdChart","Collector ID Entry",collectorIdData);
                    this.generatePieChart("ageDistributionChart","Age Distribution",ageDistributionData);
                    this.generatePieChart("maritalStatusChart","Marital Status",maritalStatusData);
                    this.generatePieChart("genderDistributionChart","Gender Distribution",genderDistributionData);
                    this.generateBarChart("sourceOfIncomeChart","Source of Income",sourceOfIncomeData);
                    this.generatePieChart("Doyouhaveanydisability","Disability",Doyouhaveanydisability);
                    this.generateBarChart("wardID", "Count Ward", wards);
                    this.generateBarChart("lgaID", "LGA Counts", LgaData);
                    
                },                
                generateBarChart(id, title, chartData) {
                    const ctx = document.getElementById(id).getContext("2d");
                    new Chart(ctx, {
                        type: "bar",
                        data: {
                            labels: Object.keys(chartData),
                            datasets: [
                                {
                                    label: title,
                                    data: Object.values(chartData),
                                    backgroundColor: "rgba(75, 192, 192, 0.6)",
                                    borderColor: "rgba(75, 192, 192, 1)",
                                    borderWidth: 1,
                                },
                            ],
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            scales: {
                                y: {
                                    beginAtZero: true,
                                    stepSize: 1,
                                },
                            },
                        },
                    });
                },
                // Function to generate a pie chart
                generatePieChart(id, title, chartData) {
                    const ctx = document.getElementById(id).getContext("2d");
                    new Chart(ctx, {
                        type: "pie",
                        data: {
                            labels: Object.keys(chartData),
                            datasets: [
                                {
                                    data: Object.values(chartData),
                                    backgroundColor: ["#dc3545", "#198754", "#0dcaf0"],
                                },
                            ],
                        },
                    });
                },

                // Function to fetch data, generate charts, and handle pagination
                // Function to update data and generate charts
                async updateDataAndGenerateCharts() {
                    let zoneData =
                    this.data = []
                    this.chartkey++
                    this.loading = true
                    let response = await this.fetchData('api/fetch?page=10000&zone='+this.selectedZone);                    
                    this.total_entries = response.length
                    await this.generateCharts(response);       
                    this.loading = false;
                    return false;                        
                },            
            },            
            mounted() {
                // Call the initial data fetch and chart generation
                for (const lga in this.lgas) {
                    for (const collectorId of this.lgas[lga]) {
                        this.reverseLookup[collectorId] = lga;
                    }
                }                
                this.updateDataAndGenerateCharts();
            },
        }).mount('#app');
    </script>
</body>

</html>
